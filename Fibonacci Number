function assert(condition, message) {
    if (!condition) {
        message = message || "Assertion failed";
        if (typeof Error !== "undefined") {
            throw new Error(message);
        }
        throw message; // Fallback
    }
}

function Fibonacci(num) { 

  var fibo = [0,1];
  var sum = 1;
  
  for (var i = 2; i <= num; i++) {
    fibo.push(sum);
    sum += fibo[i-1]
  }
  
  return fibo[num];     
}

function FibonacciRecursion(num) {
	if (num < 2) return num;
	else return FibonacciRecursion(num-1)+FibonacciRecursion(num-2);
}

// Fibonacci returns nth number where sequence begins at 0
var num = 10
var expected = 55
var actual = Fibonacci(10)
var error_msg = "Error, expected " + expected + " but got " + actual + "\n\n"
assert(actual == expected, error_msg)
console.log(actual);

// Recursion returns nth number where sequence begins at 0
var num = 10
var expected = 55
var actual = FibonacciRecursion(10)
var error_msg = "Error, expected " + expected + " but got " + actual + "\n\n"
assert(actual == expected, error_msg)
console.log(actual);

console.log("All tests pass!");
